---
title: "Week 4 lab"
format: html
editor: visual
---

```{r}
library(terra) # raster
library(geodata)
library(tmap)
library(kableExtra)
library(spData)
library(tidyverse)
library(spDataLarge)
```

```{r}
zion_elevation <- rast(system.file('raster/srtm.tif', package = 'spDataLarge'))

zion_land <- rast(system.file('raster/nlcd.tif', package = 'spDataLarge'))

# test class of raster object
class(zion_elevation)
```

```{r}
tm_shape(zion_elevation) +
  tm_raster(title = "Elevation (m)") +
  tm_layout(legend.outside = TRUE)

tm_shape(zion_land) +
  tm_raster(title = 'Land Cover')
```
```{r}
landsat <- rast(system.file('raster/landsat.tif', package = 'spDataLarge'))
```

```{r}
landsat3 <- subset(landsat, 'landsat_3')
```

```{r}
tm_shape(landsat3) +
  tm_raster()
```
```{r}
global(zion_elevation, mean)
freq(zion_land)
```
## Indexing
```{r}
zion_elevation[1, 1] <- 0        # Makes the first cell of the first layer equal to 0
zion_elevation[1]               # is it zion_elevation[layer, index] <- value?

landsat[1] <- 0 # Makes all layers at the first index equal to 0

test_raster <- zion_elevation
test_raster[test_raster < 20] <- NA
```

## Spatial Subsetting
```{r}
point <- matrix(c(-113, 37.5), ncol = 2)

terra::extract(zion_elevation, point)
```
```{r}
clip <- rast(xmin = -113.3, xmax = -113, ymin = 37.2, ymax = 37.9,
             resolution = 0.3,
             vals = 1)

zion_elevation_clip <- zion_elevation[clip, drop = FALSE]

```

```{r}
tm_shape(zion_elevation) +
  tm_raster()

tm_shape(zion_elevation_clip) +
  tm_raster()
```

```{r}
rmask <- zion_elevation

rmask[rmask < 2000] <- NA

#bracket subsetting
masked1 <- zion_elevation[rmask, drop = FALSE]

masked2 <- terra::mask(zion_elevation, rmask)  # first option is what we want TO mask, second option is what we are masking with
```

```{r}
tm_shape(masked1) +
  tm_raster()
```

```{r}
rcl <- matrix(c(1000, 1500, 1,
                1500, 2000, 2,
                2000, 2500, 3,
                2500, 3000, 4),
              ncol = 3, byrow = TRUE)

reclassified <- terra::classify(zion_elevation, rcl = rcl)
values(reclassified) <- as.factor(values(reclassified))

tm_shape(reclassified) +
  tm_raster()
```
```{r}
ndvi_fun <- function(nir, red){
  (nir - red)/(nir + red)
}

ndvi_raster <- lapp(landsat[[c(4, 3)]], fun = ndvi_fun)

tm_shape(ndvi_raster) +
  tm_raster()
```

```{r}
elevation_focal <- focal(zion_elevation,
      w = matrix(1, nrow = 9, ncol = 9),
      fun = min)

tm_shape(elevation_focal) +
  tm_raster()
```
```{r}
terra::zonal(zion_elevation, reclassified, fun = mean)
```
```{r}
terra::global(zion_elevation, mean)
```
### Changing the extent
```{r}
extend <- terra::extend(zion_elevation, c(1, 200))    # larger extent than the original one

extend2 <- terra::extend(zion_elevation, extend)      # extended our original raster to match it

extend + extend2
```
### Origin
```{r}
origin(zion_elevation)
```
### Changing resolution
```{r}
zion_elevation_coarse <- terra::aggregate(zion_elevation,
                                          fact = 5,
                                          fun = mean)
```

```{r}
map1 <- tm_shape(zion_elevation) +
  tm_raster(title = "Elevation (m)") +
  tm_layout(main.title = "original")

map2 <- tm_shape(zion_elevation_coarse) +
  tm_raster(title = "Elevation (m)") +
  tm_layout(main.title = "aggregated")

tmap_arrange(map1, map2, nrow = 1) 
```

```{r}
zion_elevation_disagg <- terra::disagg(zion_elevation_coarse,
                                       fact = 5,
                                       method = 'bilinear')

if(identical(zion_elevation, zion_elevation_disagg)) {
  print('match!')
}else{
  warning("don't match")
}
```
### Resampling

```{r}
target_rast <- rast(xmin = -113.2, xmax = -112.9,
                   ymin = 37.14, ymax = 37.5,
                   nrow = 450, ncol = 460, 
                   crs = crs(zion_elevation))

zion_elevation_resample <- resample(zion_elevation, y = target_rast, method = "bilinear")

map4 <- tm_shape(zion_elevation_resample) +
  tm_raster(title = "Elevation (m)") +
  tm_layout(main.title = "resampled")

tmap_arrange(map1, map4, nrow = 1) 
```





